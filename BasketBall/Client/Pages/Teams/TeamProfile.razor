@page "/team/{TeamId:int}"
@page "/team/{TeamId:int}/{TeamName}"
@inject ITeamRepository teamRepository

@if (model == null)
{
    <text>Loading... .. .</text>
}
else
{
    <h2>@model.Team.TeamName</h2>
    for (int i = 0; i < model.Games.Count; i++)
    {
        if (i < model.Games.Count - 1)
        {
            @linkGame(model.Games[i])<text>, </text>
        }
        else
        {
            @linkGame(model.Games[i])
        }
    }
    <div style="display:flex">
        <span style="display: inline-block; margin-right:5px;"><img src="@model.Team.TeamLogo" style="width: 225px; height:315px;" /></span>
    </div>
    <div style="margin-top:10px;">
        <h3>Players</h3>
        <div style="display: flex; flex-direction:column">
            @foreach (var player in model.Players)
	{
            <div style="margin-bottom: 2px;">
                <img style="width:50px;" src="@player.Picture" />
                <span style="display:inline-block;width:200px;">
                    <a href="/person/@player.Id/@player.FullName.Replace(" ", "-")">@player.FullName</a>
                </span>
                <span style="display:inline-block; width:30px;">-= Playing positions =-</span>
                <span>@player.Position</span>
            </div>
	}
        </div>
    </div>
}

@code {
    //:int is needed because teamURL is a string type
    //To display team name in the url. Parameter restriction to TeamName:string is not needed

    [Parameter] public int TeamId { get; set; } // @page route parameter of int type
    [Parameter] public string TeamName { get; set; }
    //linking Team and Game. If Team get filtered by game it will be redirected to TeamFilter componenet
    private RenderFragment<Game> linkGame = (game) =>@<a href="teams/search?gameId=@game.GameId">@game.GameTitle</a>;
    TeamProfileDTO model;

    protected async override Task OnInitializedAsync()
    {
        model = await teamRepository.GetTeamProfileDTO(TeamId);
        Console.WriteLine($"The Id of the team is: {TeamId}");
    }
}
