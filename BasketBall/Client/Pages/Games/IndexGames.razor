@page "/games"
@inject IGameRepository gameRepository

<h3>Index Games</h3>

<div class="form-group">
    <a class="btn btn-info" href="game/create">New Game</a>
</div>
<Pagination CurrentPage="@paginationDTO.Page" TotalAmountOfPages="totalAmountOfPages" SelectedPage="SelectedPage" />

<GenericList List="games">
    <WholeListTemplate>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Game Title</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in games)
                {
                    <tr>
                        <td>
                            <a class="btn btn-success" href="/game/edit/@item.GameId">Edit</a>
                            <button class="btn btn-danger" @onclick="@(()=> DeleteGame(item.GameId))">Delete</button>
                        </td>
                        <td>@item.GameTitle</td>
                    </tr>
                }
            </tbody>
        </table>
    </WholeListTemplate>
</GenericList>
@code {
    private List<Game> games;
    PaginationDTO paginationDTO = new PaginationDTO();
    private int totalAmountOfPages;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadGames();
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message);
        }
    }
    private async Task LoadGames()
    {
        var paginatedResponse = await gameRepository.GetIndexedGames(paginationDTO);
        games = paginatedResponse.Response;
        totalAmountOfPages = paginatedResponse.TotalAmountOfPages;
    }
    private async Task SelectedPage(int page)
    {
        paginationDTO.Page = page;
        await LoadGames();
    }

    private async Task DeleteGame(int gameId)
    {
        await gameRepository.DeleteGame(gameId);
        await LoadGames();
    }
}